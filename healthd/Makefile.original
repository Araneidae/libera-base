# $Id: Makefile 2352 2008-12-05 09:50:04Z matejk $
#
# Copyright (C) 2004 Instrumentation Technologies
# See the COPYING file for copying conditions.
#
#
# GNU Makefile for Libera health daemon.
#
# You should install the following packages:
#
#   libsysfs-dev package from debian sarge repository
#   i-tech lm-sensors package in /usr/local/src/lm-sensors
#   i-tech Linux kernel in /usr/src
#
#
# If you have GNU Make installed, type 
#
#   make install
#   make clean
#
# on the command line to build and install the LIBERA TIMING DAEMONS.
# To change the default parameters, edit the configuration
# section below.
#

# 
# -------- configuration section: start --------
#

#
# TARGET: Set to family member ID.
#
export TARGET = EBPP

#
# drvdir: Where to look for Libera GNU/Linux driver .h files.
#
drvdir = ../../../driver/src/

#
# cspidir: Where to look for Libera CSPI .h files.
#
cspidir = ../../../cspi/src

#
# lmsendir: Where to look for lm-sensors .h and .so files.
#
lmsendir = /usr/local/src/lm-sensors

#
# DEBUG: Debug level. Set to non-zero for debug build or
# anything else (zero or commented) for non-debug build.
# Note: CPPFLAGS is appended the DEBUG and NDEBUG flag in
# debug and non-debug build, respectively.
#
ifndef DEBUG
DEBUG = 0
endif

#
# CROSS_COMPILE: Cross compiler prefix to prepend to CC.
#
#CROSS_COMPILE = arm-linux-

#
# CC: The command to invoke C compiler.
#
CC = gcc 

#
# CFLAGS: Options to pass to the C compiler.
#
CFLAGS = -std=gnu99 -Wall

#
# CPPFLAGS: Options to pass to the preprocessor.
#
CPPFLAGS = -D$(TARGET) -D_REENTRANT -I$(drvdir) -I$(cspidir) -I$(lmsendir)

#
# LDFLAGS: Options to pass to the linker.
#
LDFLAGS = -L$(lmsendir)/lib -lm -lsensors

#
# LIBS: Additional libs to pass to the linker.
#
LIBS =

#
# INSTALL: The pathname of the 'install' command for installing 
# a file into the system.
#
INSTALL = /usr/bin/install

#
# prefix: A prefix used in constructing the installation 
# pathnames below.
#
prefix = $(DESTDIR)/

#
# bindir: The directory to install the binaries in.
#
bindir = opt/bin/
libdir = opt/lib/
initdir = etc/init.d/

#
# -------- configuration section: end --------
#


vpath %.h $(cspidir)
vpath %.h $(drvdir)

CC := $(CROSS_COMPILE)$(CC)
AR := $(CROSS_COMPILE)$(AR)

# Release version
RELEASE_VERSION := $(shell /bin/date +%Y%m%d)
CPPFLAGS += -DRELEASE_VERSION=$(RELEASE_VERSION)

# Debugging and optimization flags
ifndef DEBUG
	DEBUG = 0
endif
ifeq ($(DEBUG),0)
	CFLAGS += -O2
	CPPFLAGS += -DNDEBUG
else
	CFLAGS += -O -g		# "-O" is needed to expand inlines
	CPPFLAGS += -DDEBUG=$(DEBUG)
endif

BINTARGET=  healthd
INITTARGET= healthd-init

SRCS = healthd.c
OBJS = $(SRCS:%.c=%.o)


all: $(BINTARGET)

$(OBJS): .depend


install: 
	install -d -o root -g root -m 755 $(prefix)$(bindir)
	install -d -o root -g root -m 755 $(prefix)$(libdir)
	install -d -o root -g root -m 755 $(prefix)$(initdir)
	install -c -o root -g root -m 755 healthd $(prefix)$(bindir)
ifneq ($(TARGET),BBFP) # powerdown.bin only for NOT BBFP (Bunch By Bunch)
	install -c -o root -g root -m 664 powerdown.bin $(prefix)$(libdir)
endif
	install -c -o root -g root -m 755 healthd-init $(prefix)$(initdir)healthd

# create debian package
DEB_TIME := $(shell /bin/date -R)
DEB_MINOR := 1
DEB_TARGET := unknown_target 
ifeq ($(TARGET),EBPP)
DEB_TARGET := ebpp
endif
ifeq ($(TARGET),BBFP)
DEB_TARGET := bbfp
endif
ifeq ($(TARGET),HBPP)
DEB_TARGET := hbpp
endif
ifeq ($(TARGET),DPP)
DEB_TARGET := dpp
endif

RELEASE_VERSION_TARGET=$(RELEASE_VERSION)-$(DEB_TARGET)

deb:
	@echo Creating debian package
	pwd
	-@$(RM) -r ../libera-healthd-$(RELEASE_VERSION_TARGET)
	@cd ..;  pwd;\
	cp -a src libera-healthd-$(RELEASE_VERSION_TARGET);\
	cd libera-healthd-$(RELEASE_VERSION_TARGET);\
	pwd;\
	echo "libera-healthd ($(RELEASE_VERSION_TARGET)-$(DEB_MINOR)) unstable; urgency=low" >debian/changelog ;\
	echo >>debian/changelog;\
	echo "  * Initial release" >>debian/changelog ;\
	echo >>debian/changelog ;\
	echo " -- Instrumentation Technologies <support@i-tech.si>  $(DEB_TIME)" >>debian/changelog;
	cd ../libera-healthd-$(RELEASE_VERSION_TARGET); dpkg-buildpackage -rfakeroot -uc -us
	pwd
	$(RM) -r ../libera-healthd-$(RELEASE_VERSION_TARGET)
	@echo "Packet was build for major release number $(RELEASE_VERSION) and  minor release number $(DEB_MINOR)"
	@echo "You may change this by setting RELEASE_VERSION and DEB_MINOR correspondingly"

# SRC package
S_NAME       := $(notdir $(shell cd .. ; pwd))
S_NAME_VER   := $(S_NAME)-$(RELEASE_VERSION)
S_ARCHIVE    := $(S_NAME_VER).tar.gz
src: clean
	@echo "Creating source package $(S_ARCHIVE)."
	-@$(RM) -r ../../$(S_NAME_VER)
	cd ../..; cp -a $(S_NAME) $(S_NAME_VER)
	-cd ../..; $(RM) -r `find $(S_NAME_VER) -path '*.svn'`
	tar -cvzf ../../$(S_ARCHIVE) -C ../../$(S_NAME_VER) .
	$(RM) -r ../../$(S_NAME_VER)


clean:	dummy
	$(RM) -f *~
	$(RM) -f core `find . -type f -name '*.[osd]' -o -name '*~' -o \
	-name '*.out' -o -name '#*' -o -name '.#*'`
	$(RM) -f $(BINTARGET)
	$(RM) -rf ../tmp
	-$(RM)  ../libera-healthd_*


# False targets.
.PHONY: dummy

dep .depend:
	@echo Making dep and .depend
	$(CC) -MM $(CPPFLAGS) *.c >.depend


ifeq (.depend, $(wildcard .depend))
include .depend
endif

# EOF
