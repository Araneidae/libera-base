#!/bin/sh

# Script to update u-boot on Libera

HERE="$(dirname "$0")"
. "$HERE"/functions


U_BOOT_IMAGE="$HERE/u-boot.bin"


add_args()
{
    CONFIGURE_ARGS="$CONFIGURE_ARGS -f$1=$2"
}


CONFIGURE_ARGS=
ECHO=:
FORCED=false
DO_WRITE=false
while getopts 'hVt:s:Fw' option; do
    case "$option" in
    h)  cat <<'EOF'
Usage: update-u-boot [options]
    -h      Show this help
    -V      Verbose mode: comment on every stage
    -t:     Set boot timeout
    -s:     Set tftp server address: *must* be a decimal dotted address.
    -F      Force update even if u-boot up to date (testing only!)
    -w      Write the update if required or forced.  Otherwise only a test
            is done (and the return code is set accordingly).
EOF
        exit 0 ;;
    V)  ECHO=echo
        CONFIGURE_ARGS="$CONFIGURE_ARGS -V";;
    t)  add_args bootdelay $OPTARG ;;
    s)  add_args serverip  $OPTARG ;;
    F)  FORCED=true ;;
    w)  DO_WRITE=true ;;
    *)  Error Invalid option: try -h for help ;;
    esac
done
    


$ECHO Testing if u-boot already upgraded
if "$ARCH"/bindiff $($VERBOSE || echo -q) /dev/mtd0 "$U_BOOT_IMAGE"; then
    $ECHO U-boot already upgraded
    $FORCED || exit 0
elif $TEST; then
    $ECHO U-boot needs upgrade
    # If we're in verbose and test mode then drop through to calculate the
    # new environment
    $DO_WRITE || exit 1
fi


# From this point on we're committed to writing to the flash.
# Start by ensuring we can write to mtd0 and mtd1.
$ECHO Writing to u-boot
make_writeable  &&

"$HERE"/configure-boot -w $CONFIGURE_ARGS  ||
    Error Unable to set configuration


# Ok.  We've done everything we need to do; now it's time to update the
# u-boot itself.  If this goes wrong we're in trouble!
$ECHO Writing new u-boot
write_mtd "$U_BOOT_IMAGE" 0  &&
sync  &&
check_mem 0 "$U_BOOT_IMAGE"  ||
{
    echo >&2 $'\e[1;31m' !!!WARNING!!!  
    echo >&2 !!!
    echo >&2 !!! u-boot on machine $(hostname) is unbootable.
    echo >&2 !!! $'\e[1;0m'
    exit 1
}
