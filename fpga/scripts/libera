#!/bin/sh
#
# $Id: libera 2344 2008-12-04 09:35:28Z matejk $
#
# libera - Start/stop Libera (FPGA design, driver & PLL daemons).
#
#
# Copyright (C) 2005 Instrumentation Technologies
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
# or visit http://www.gnu.org


# Dependencies
[ ! -x /opt/bin/fp ] && exit 0

# Get Libera configuration
CONFIG="/etc/default/libera"
if [ ! -f $CONFIG ]; then
    echo "Exiting because Libera configuration file not found: $CONFIG"
    exit 0
else
    . $CONFIG
fi

# Libera generic server config
SERVER_CONFIG="/etc/default/libera-server"

# Libera rc file
LIBERA_RC="/etc/rc.libera"

# Instrument type detection
FEATURE=`/opt/bin/Monitor 0x1400001C r`
INSTRUMENT=$(( FEATURE & 0xff000000 ))
if [ $INSTRUMENT == 16777216 ]; then
    INSTRUMENT=Brilliance
fi

# Health checking parameters
MIN_FAN_SPEED=1000
if [ $INSTRUMENT == Brilliance ]; then
    MAX_TEMP=75000
else
    MAX_TEMP=65000
fi

check_health()
{
    # Libera Brilliance specific
    if [ -e /sys/class/i2c-adapter/i2c-0/device/0-0048 ]; then
	TEMP_PATH=/sys/class/i2c-adapter/i2c-0/device
    else
	# A different path in kernel 2.6.25.7
	TEMP_PATH=/sys/class/i2c-adapter/i2c-0
    fi
    # Libera Brilliance specific
    if [ $INSTRUMENT == Brilliance ]; then
        if [ -e $TEMP_PATH/temp1_input ]; then
            TEMP=`cat $TEMP_PATH/temp1_input`
        else
            TEMP=`cat $TEMP_PATH/0-0029/temp1_input`
        fi
    else
        TEMP=`cat $TEMP_PATH/0-0029/temp1_input`
    fi
    FAN0=`cat $TEMP_PATH/0-004b/fan1_input`
    FAN1=`cat $TEMP_PATH/0-0048/fan1_input`

    [ "$TEMP" -gt "$MAX_TEMP" ] && {
        echo "Temperature too high ($TEMP)!"
        return 1
    }

    [ "$FAN0" -lt "$MIN_FAN_SPEED" ] || [ "$FAN1" -lt "$MIN_FAN_SPEED" ] && {
        echo "Fan(s) too slow ($FAN0, $FAN1)!"
        return 1
    }

    return 0
}

# Non-brilliance powerdown design file.
POWERDOWN_DESIGN="/opt/lib/powerdown.bin"

# Overheating emergency handling.
overheating()
{
    # Libera Brilliance specific
    if [ $INSTRUMENT == Brilliance ]; then
        echo "Putting FPGA in powerdown mode."

        # ADC Clock DCM reset
        /opt/bin/Monitor 0x1400402c w 0x00000001 >/dev/null

        # Powerdown LVPECL Outputs on AD9510
        /opt/bin/Monitor 0x1400403c w 0x00003c0a >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00003d0a >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00003e0a >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00003f0a >/dev/null

        /opt/bin/Monitor 0x1400403c w 0x00005805 >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00005a01 >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00005801 >/dev/null
        /opt/bin/Monitor 0x1400403c w 0x00005a01 >/dev/null

        # GbE SFP reset
        /opt/bin/Monitor 0x1402c008 w 0x00000001 >/dev/null

        # FAI Configuration Rocket IO Powerdown
        /opt/bin/Monitor 0x1402A000 w 0x00000000 >/dev/null
    else
        echo "Loading powerdown FPGA design."
        /opt/bin/fp < $POWERDOWN_DESIGN
    fi
}

# These values _must_ be known here and are specified in $CONFIG
#
# DESIGN     - Path to FPGA design.
# DTYPE      - FPGA design type (bo/sr).
# FLMCDHZ    - Initial LMC frequency [dHz (10^-1 Hz)].
# FREV       - Revolution frequency [Hz].
# MCPRESC    - MC prescaler.
# NCLK_ADC   - No. of CLK/ADC script repetitions in DCM script.
#
# HARMONIC   - Harmonic number.
# NTBT       - Number of TbT samples per switch position [TbT samples].
# ATTNSUM    - Sum of attenuators @ 0 dBm.
# ADCPEAK    - ADC-rate buffer peak level @ 0 dBm [ADC count].
# TBTMARKD   - TbT marker delay [ADC samples].
# A2DT       - Analog to digital switch propagation time [ADC samples].
#
# OFFSET_TUNE     - PLL offset tune [MC Prescaler count].
# COMPENSATE_TUNE - NCO shift flag [yes/no].

# IL_K_FILT_XY             - Interlock XY K of IIR filter [1/2^n].
# IL_K_FILT_ADC_OVERFLOW   - Interlock ADC overflow K of IIR filter [n/255].
# IL_K_CORR_ADC_LIMIT      - Interlock ADC overflow scaling factor [n/1000].
# IL_MAX_ADC_OVERFLOW_DUR  - ADC overflow duration upper limit [ADC samples].
#
# DSCD_K_PHASE_CPUTIME     - Phase compensation cpu_time/accuarcy factor [max 10].
# DSCD_MINTBT_LEARN_LIMIT  - Minimal TBT amplitude for DSC learning [TbT counts].
#
# SWITCHING_SOURCE - SW source signal: internal MC vs. external MC.
# SWITCHING_DELAY  - Switching source delay/phase [ADC count].

# POSTMORTEM_BUFFER - Size of post mortem buffer

# MT_UNOMINAL - MT PLL controller DAC nominal offset.
# PHASE_OFFSET - MT PLL controller VCXO phase offset.
# MT_UNLCKTHRSHLD - MT PLL controller unlock threshold.

# ST_UNOMINAL - ST PLL controller DAC nominal offset.
# ST_UNLCKTHRSHLD - ST PLL controller unlock threshold.

[ -z "$DESIGN" ] && {
    echo "Must specify DESIGN!"
    exit -1
}
[ -z "$DTYPE" ] && {
    echo "Must specify DTYPE!"
    exit -1
}
[ -z "$FLMCDHZ" ] && {
    echo "Must specify FLMCDHZ!"
    exit -1
}
[ -z "$FREV" ] && {
    echo "Must specify FREV!"
    exit -1
}
[ -z "$MCPRESC" ] && {
    echo "Must specify MCPRESC!"
    exit -1
}
[ -z "$NCLK_ADC" ] && {
    echo "Must specify NCLK_ADC!";
    exit -1
}
[ -z "$HARMONIC" ] && {
    echo "Must specify HARMONIC!";
    exit -1
}
[ -z "$NTBT" ] && {
    echo "Must specify NTBT!";
    exit -1
}
[ -z "$ATTNSUM" ] && {
    echo "Must specify ATTNSUM!";
    exit -1
}
[ -z "$ADCPEAK" ] && {
    echo "Must specify ADCPEAK!";
    exit -1
}
[ -z "$TBTMARKD" ] && {
    echo "Must specify TBTMARKD!";
    exit -1
}
[ -z "$A2DT" ] && {
    echo "Must specify A2DT!";
    exit -1
}

[ -z "$OFFSET_TUNE" ] && {
    echo "Must specify OFFSET_TUNE!";
    exit -1
}
[ -z "$COMPENSATE_TUNE" ] && {
    echo "Must specify COMPENSATE_TUNE!";
    exit -1
}

[ -z "$IL_K_FILT_XY" ] && {
    echo "Must specify IL_K_FILT_XY!";
    exit -1
}
[ -z "$IL_K_FILT_ADC_OVERFLOW" ] && {
    echo "Must specify IL_K_FILT_ADC_OVERFLOW!";
    exit -1
}
[ -z "$IL_K_CORR_ADC_LIMIT" ] && {
    echo "Must specify IL_K_CORR_ADC_LIMIT!";
    exit -1
}
[ -z "$IL_MAX_ADC_OVERFLOW_DUR" ] && {
    echo "Must specify IL_MAX_ADC_OVERFLOW_DUR!";
    exit -1
}


[ -z "$DSCD_K_PHASE_CPUTIME" ] && {
    echo "Must specify DSCD_K_PHASE_CPUTIME!";
    exit -1
}

[ -z "$DSCD_MINTBT_LEARN_LIMIT" ] && {
    echo "Must specify DSCD_MINTBT_LEARN_LIMIT!";
    exit -1
}

[ -z "$SWITCHING_SOURCE" ] && {
    echo "Must specify SWITCHING_SOURCE!";
    exit -1
}
[ -z "$SWITCHING_DELAY" ] && {
    echo "Must specify SWITCHING_DELAY!";
    exit -1
}

[ -z "$POSTMORTEM_BUFFER" ] && {
    echo "Must specify POSTMORTEM_BUFFER!";
    exit -1
}

[ -z "$MT_UNOMINAL" ] && {
    echo "Must specify MT_UNOMINAL!";
    exit -1
}

[ -z "$PHASE_OFFSET" ] && {
    echo "Must specify PHASE_OFFSET!";
    exit -1
}

[ -z "$MT_UNLCKTHRSHLD" ] && {
    echo "Must specify MT_UNLCKTHRSHLD!";
    exit -1
}

[ -z "$ST_UNOMINAL" ] && {
    echo "Must specify ST_UNOMINAL!";
    exit -1
}

[ -z "$ST_UNLCKTHRSHLD" ] && {
    echo "Must specify ST_UNLCKTHRSHLD!";
    exit -1
}

case "$1" in
    start)
        # First load the FPGA design
	echo -n "Loading FPGA design..."
	/opt/bin/fp < $DESIGN
        echo "done."

        # Check fans and temperature
        echo -n "Checking health..."
        check_health
        [ $? -ne 0 ] && {
            echo "Not starting libera because of bad health!"
            overheating
            exit 1
        }
        echo "done."

        # Initialize FPGA design
	echo -n "Initializing FPGA design..."
	/opt/bin/fpga_init $NCLK_ADC > /dev/null
        # FAI if installed
        [ -x  /opt/bin/fai_init ] && {
            /opt/bin/fai_init < /etc/default/fai_header
        }
        echo "done."
	
        # Load MSP driver
	echo -n "Loading MSP driver..."
	modprobe msp
        echo "done."

        # Load the driver with proper parameters
	echo -n "Loading Libera driver..."
	modprobe libera flmcdHz=$FLMCDHZ kadc=$IL_K_CORR_ADC_LIMIT ilkdur=$IL_MAX_ADC_OVERFLOW_DUR pmsize=$POSTMORTEM_BUFFER
        echo "done."
	
        # Start pll daemons
        echo -n "Starting PLL daemon: lplld"
        [ $COMPENSATE_TUNE == "yes" ] && {
            start-stop-daemon --start --quiet --exec /opt/bin/lplld -- -p $MCPRESC -r $HARMONIC -o $OFFSET_TUNE -u $MT_UNOMINAL -f $PHASE_OFFSET -l $MT_UNLCKTHRSHLD -m $ST_UNOMINAL -k $ST_UNLCKTHRSHLD -c 1
        } || {
            start-stop-daemon --start --quiet --exec /opt/bin/lplld -- -p $MCPRESC -r $HARMONIC -o $OFFSET_TUNE -u $MT_UNOMINAL -f $PHASE_OFFSET -l $MT_UNLCKTHRSHLD -m $ST_UNOMINAL -k $ST_UNLCKTHRSHLD
        }
        echo "."

        # Start Libera event daemon
	echo -n "Starting Libera event daemon: leventd"
	start-stop-daemon --start --quiet --exec /opt/bin/leventd
        echo "."

        # Start Libera DSC daemon
        sleep 2
	echo -n "Starting Libera DSC daemon: ldscd"
	start-stop-daemon --start --quiet --exec /opt/bin/ldscd -- -s$ATTNSUM -f$FREV -m$TBTMARKD -n$NTBT -a$ADCPEAK -r$HARMONIC -t$A2DT -p$MCPRESC -g$DSCD_K_PHASE_CPUTIME -l$DSCD_MINTBT_LEARN_LIMIT
        echo "."

        # Reset Interlock Status
        sleep 2
        echo "InterlockStatus 0" | /opt/bin/libera -s
        # ... and Max ADC value
        /opt/bin/libera -l > /dev/null

	# Optionally start Libera Generic server
	if [ -f $SERVER_CONFIG ]; then
	    . $SERVER_CONFIG
	    if [ "$SERVER_BOOT" = "yes" -o "$SERVER_BOOT" = "true" ]; then
		/etc/init.d/libera-server start
	    fi
	fi

	# Run rc.libera if it is executable
	if [ -x $LIBERA_RC ]; then
	    echo -n "Running $LIBERA_RC"	
	    $LIBERA_RC > /dev/null 2>&1
	    echo
	fi
	;;
    

    stop)
	# Optionally stop Libera Generic server
	if [ -f $SERVER_CONFIG ]; then
	    . $SERVER_CONFIG
	    if [ "$SERVER_BOOT" = "yes" -o "$SERVER_BOOT" = "true" ]; then
		/etc/init.d/libera-server stop
	    fi
	fi

	# Stop Libera DSC daemon
	echo -n "Stopping Libera DSC daemon: ldscd"
	start-stop-daemon --stop --quiet --pidfile /var/run/ldscd.pid
        echo "."

	# Stop Libera event daemon
	echo -n "Stopping Libera event daemon: leventd"
        start-stop-daemon --stop --quiet --pidfile /var/run/leventd.pid
        echo "."

	# Stop PLL daemon
	echo -n "Stopping PLL daemon: lplld"
	start-stop-daemon --stop --quiet --pidfile /var/run/lplld.pid
        echo "."

	# Remove Libera driver
        sleep 1
	echo -n "Removing Libera driver..."
	modprobe -r libera
        echo "done."

	# Remove MSP driver
	echo -n "Removing MSP driver..."
	modprobe -r msp
        echo "done."
	;;

    restart)
                $0 stop
                sleep 1
                $0 start
                ;;
        *)
                echo "Usage: $0 {start|stop|restart}"
                exit 1
                ;;
esac


exit 0
